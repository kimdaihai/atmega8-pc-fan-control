
TempControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000009f4  00000a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 000000a0  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000183  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000bbf  00000000  00000000  00000c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005a6  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000da7  00000000  00000000  00001e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b0  00000000  00000000  00002bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000032c  00000000  00000000  00002d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000644  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ef       	ldi	r30, 0xF4	; 244
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 37       	cpi	r26, 0x72	; 114
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	5f d0       	rcall	.+190    	; 0x108 <main>
  4a:	d2 c4       	rjmp	.+2468   	; 0x9f0 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <init_ADC>:
	Delay_ms(500);
	C_SETBIT(Green_LED);
}

void init_ADC() {
	ADMUX=(1<<REFS0);// For Aref=AVcc;
  4e:	80 e4       	ldi	r24, 0x40	; 64
  50:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(7<<ADPS0);
  52:	87 e8       	ldi	r24, 0x87	; 135
  54:	86 b9       	out	0x06, r24	; 6
}
  56:	08 95       	ret

00000058 <init_PWM>:

void init_PWM() {
	ICR1 = 320; //TOP value for 25 KHz
  58:	80 e4       	ldi	r24, 0x40	; 64
  5a:	91 e0       	ldi	r25, 0x01	; 1
  5c:	97 bd       	out	0x27, r25	; 39
  5e:	86 bd       	out	0x26, r24	; 38
	TCCR1A = _BV(WGM11);
  60:	82 e0       	ldi	r24, 0x02	; 2
  62:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM13);
  64:	80 e1       	ldi	r24, 0x10	; 16
  66:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= _BV(COM1A1) | _BV(COM1A0);
  68:	8f b5       	in	r24, 0x2f	; 47
  6a:	80 6c       	ori	r24, 0xC0	; 192
  6c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= _BV(CS10);
  6e:	8e b5       	in	r24, 0x2e	; 46
  70:	81 60       	ori	r24, 0x01	; 1
  72:	8e bd       	out	0x2e, r24	; 46
}
  74:	08 95       	ret

00000076 <clearLEDS>:

void clearLEDS() {
	C_CLEARBIT(Red_LED);
  76:	ac 98       	cbi	0x15, 4	; 21
	C_CLEARBIT(Yellow_LED);
  78:	ab 98       	cbi	0x15, 3	; 21
	C_CLEARBIT(Green_LED);
  7a:	aa 98       	cbi	0x15, 2	; 21
}
  7c:	08 95       	ret

0000007e <setDutyCycle1>:

void setDutyCycle1() {
	clearLEDS();
  7e:	fb df       	rcall	.-10     	; 0x76 <clearLEDS>
	C_SETBIT(Green_LED);
  80:	aa 9a       	sbi	0x15, 2	; 21
	OCR1A = 255;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	9b bd       	out	0x2b, r25	; 43
  88:	8a bd       	out	0x2a, r24	; 42
}
  8a:	08 95       	ret

0000008c <setDutyCycle2>:
	
void setDutyCycle2() {
	clearLEDS();
  8c:	f4 df       	rcall	.-24     	; 0x76 <clearLEDS>
	C_SETBIT(Yellow_LED);
  8e:	ab 9a       	sbi	0x15, 3	; 21
	OCR1A = 127;
  90:	8f e7       	ldi	r24, 0x7F	; 127
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	9b bd       	out	0x2b, r25	; 43
  96:	8a bd       	out	0x2a, r24	; 42
}
  98:	08 95       	ret

0000009a <setDutyCycle3>:

void setDutyCycle3() {	
	clearLEDS();
  9a:	ed df       	rcall	.-38     	; 0x76 <clearLEDS>
	C_SETBIT(Red_LED);
  9c:	ac 9a       	sbi	0x15, 4	; 21
	OCR1A = 0;
  9e:	1b bc       	out	0x2b, r1	; 43
  a0:	1a bc       	out	0x2a, r1	; 42
}
  a2:	08 95       	ret

000000a4 <ReadADC>:

uint16_t ReadADC(uint8_t ch) {
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;
   ADMUX|=ch;
  a4:	97 b1       	in	r25, 0x07	; 7
  a6:	87 70       	andi	r24, 0x07	; 7
  a8:	89 2b       	or	r24, r25
  aa:	87 b9       	out	0x07, r24	; 7

   //Start Single conversion
   ADCSRA|=(1<<ADSC);
  ac:	36 9a       	sbi	0x06, 6	; 6

   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
  ae:	34 9b       	sbis	0x06, 4	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <ReadADC+0xa>

   //Clear ADIF by writing one to it
   ADCSRA|=(1<<ADIF);
  b2:	34 9a       	sbi	0x06, 4	; 6

   return(ADC);
  b4:	24 b1       	in	r18, 0x04	; 4
  b6:	35 b1       	in	r19, 0x05	; 5
}
  b8:	c9 01       	movw	r24, r18
  ba:	08 95       	ret

000000bc <init_controller>:
void init_controller() {
	// DEFINE I/O PORTS
	/*
		Port D as output for the LCD
	*/
	DDRD = 0xFF; 
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	81 bb       	out	0x11, r24	; 17
		PB3 - *
		PB2 - *
		PB1 - PWM (output)
		PB0 - *
	*/
	DDRB = 0b11000010;
  c0:	82 ec       	ldi	r24, 0xC2	; 194
  c2:	87 bb       	out	0x17, r24	; 23
		PC3 - Yellow_LED (output)
		PC2 - Green_LED (output)
		PC1 - *
		PC0 - LM35 sensor (input)
	*/
	DDRC = 0b00111100;
  c4:	8c e3       	ldi	r24, 0x3C	; 60
  c6:	84 bb       	out	0x14, r24	; 20

	/*
		Turn on the LEDs
	*/
	C_SETBIT(Lifeline);
  c8:	ad 9a       	sbi	0x15, 5	; 21
	Delay_ms(500);
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	99 e6       	ldi	r25, 0x69	; 105
  ce:	a8 e1       	ldi	r26, 0x18	; 24
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	a0 40       	sbci	r26, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <init_controller+0x14>
  d8:	00 c0       	rjmp	.+0      	; 0xda <init_controller+0x1e>
  da:	00 00       	nop
	C_SETBIT(Red_LED);
  dc:	ac 9a       	sbi	0x15, 4	; 21
	Delay_ms(500);
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	99 e6       	ldi	r25, 0x69	; 105
  e2:	a8 e1       	ldi	r26, 0x18	; 24
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	a0 40       	sbci	r26, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <init_controller+0x28>
  ec:	00 c0       	rjmp	.+0      	; 0xee <init_controller+0x32>
  ee:	00 00       	nop
	C_SETBIT(Yellow_LED);
  f0:	ab 9a       	sbi	0x15, 3	; 21
	Delay_ms(500);
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	99 e6       	ldi	r25, 0x69	; 105
  f6:	a8 e1       	ldi	r26, 0x18	; 24
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	a0 40       	sbci	r26, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <init_controller+0x3c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <init_controller+0x46>
 102:	00 00       	nop
	C_SETBIT(Green_LED);
 104:	aa 9a       	sbi	0x15, 2	; 21
}
 106:	08 95       	ret

00000108 <main>:
   ADCSRA|=(1<<ADIF);

   return(ADC);
}

int main() {
 108:	6f 92       	push	r6
 10a:	7f 92       	push	r7
 10c:	8f 92       	push	r8
 10e:	9f 92       	push	r9
 110:	af 92       	push	r10
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	0f 92       	push	r0
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
	uint8_t refTemp = 30; // reference
	uint8_t check, prev_check = 0;
	short up = 1, down = 1;
	uint16_t adc_in; // ADC value
	uint8_t temp = 1; // real temperature
	init_controller();
 128:	c9 df       	rcall	.-110    	; 0xbc <init_controller>
	init_PWM();
 12a:	96 df       	rcall	.-212    	; 0x58 <init_PWM>
	lcd_init();
 12c:	04 d1       	rcall	.+520    	; 0x336 <lcd_init>
	sei(); // turn on interrupts
 12e:	78 94       	sei
	lcd_clrscr();
 130:	fc d0       	rcall	.+504    	; 0x32a <lcd_clrscr>
	lcd_puts("Spinning");
 132:	80 e6       	ldi	r24, 0x60	; 96
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	e8 d0       	rcall	.+464    	; 0x308 <lcd_puts>
	Delay_s(2); // 2 seconds delay
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	97 ea       	ldi	r25, 0xA7	; 167
 13c:	a1 e6       	ldi	r26, 0x61	; 97
 13e:	81 50       	subi	r24, 0x01	; 1
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	a0 40       	sbci	r26, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x36>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x40>
 148:	00 00       	nop
	Delay_ms(500);
	C_SETBIT(Green_LED);
}

void init_ADC() {
	ADMUX=(1<<REFS0);// For Aref=AVcc;
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(7<<ADPS0);
 14e:	87 e8       	ldi	r24, 0x87	; 135
 150:	86 b9       	out	0x06, r24	; 6
	sei(); // turn on interrupts
	lcd_clrscr();
	lcd_puts("Spinning");
	Delay_s(2); // 2 seconds delay
	init_ADC();
	refTemp = eeprom_read_byte((uint8_t*)0);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	60 d3       	rcall	.+1728   	; 0x818 <__eerd_byte_m8>
 158:	f8 2e       	mov	r15, r24
	if (!(refTemp >= TMIN && refTemp <= TMAX))
 15a:	89 51       	subi	r24, 0x19	; 25
 15c:	8a 31       	cpi	r24, 0x1A	; 26
 15e:	10 f0       	brcs	.+4      	; 0x164 <main+0x5c>
 160:	ee e1       	ldi	r30, 0x1E	; 30
 162:	fe 2e       	mov	r15, r30
 164:	19 82       	std	Y+1, r1	; 0x01
 166:	71 e0       	ldi	r23, 0x01	; 1
 168:	a7 2e       	mov	r10, r23
 16a:	b1 2c       	mov	r11, r1
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	c6 2e       	mov	r12, r22
 170:	d1 2c       	mov	r13, r1
			if (refTemp < TMAX) refTemp++;
		}
		eeprom_write_byte ((uint8_t *)0, refTemp); 
		adc_in = ReadADC(0);
		temp = adc_in/2;
		lcd_puts2("T%d-R%dC", temp, refTemp);
 172:	59 e6       	ldi	r21, 0x69	; 105
 174:	85 2e       	mov	r8, r21
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	95 2e       	mov	r9, r21
	init_ADC();
	refTemp = eeprom_read_byte((uint8_t*)0);
	if (!(refTemp >= TMIN && refTemp <= TMAX))
		refTemp = 30;
	while(1) {
		if (C_CHECKBIT(Minus_REF)) down = 0;
 17a:	b5 9b       	sbis	0x16, 5	; 22
 17c:	02 c0       	rjmp	.+4      	; 0x182 <main+0x7a>
 17e:	cc 24       	eor	r12, r12
 180:	dd 24       	eor	r13, r13
		if (C_CHECKBIT(Minus_REF) == 0 && down ==0)	{
 182:	b5 99       	sbic	0x16, 5	; 22
 184:	0a c0       	rjmp	.+20     	; 0x19a <main+0x92>
 186:	c1 14       	cp	r12, r1
 188:	d1 04       	cpc	r13, r1
 18a:	39 f4       	brne	.+14     	; 0x19a <main+0x92>
			down = 1;
			if (refTemp > TMIN) refTemp--;
 18c:	99 e1       	ldi	r25, 0x19	; 25
 18e:	9f 15       	cp	r25, r15
 190:	08 f4       	brcc	.+2      	; 0x194 <main+0x8c>
 192:	fa 94       	dec	r15
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	c4 2e       	mov	r12, r20
 198:	d1 2c       	mov	r13, r1
		}
		if (C_CHECKBIT(Plus_REF)) up = 0;
 19a:	b4 9b       	sbis	0x16, 4	; 22
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <main+0x9a>
 19e:	aa 24       	eor	r10, r10
 1a0:	bb 24       	eor	r11, r11
		if (C_CHECKBIT(Plus_REF) == 0 && up ==0) {
 1a2:	b4 99       	sbic	0x16, 4	; 22
 1a4:	0a c0       	rjmp	.+20     	; 0x1ba <main+0xb2>
 1a6:	a1 14       	cp	r10, r1
 1a8:	b1 04       	cpc	r11, r1
 1aa:	39 f4       	brne	.+14     	; 0x1ba <main+0xb2>
			up = 1;
			if (refTemp < TMAX) refTemp++;
 1ac:	a1 e3       	ldi	r26, 0x31	; 49
 1ae:	af 15       	cp	r26, r15
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <main+0xac>
 1b2:	f3 94       	inc	r15
 1b4:	31 e0       	ldi	r19, 0x01	; 1
 1b6:	a3 2e       	mov	r10, r19
 1b8:	b1 2c       	mov	r11, r1
		}
		eeprom_write_byte ((uint8_t *)0, refTemp); 
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	6f 2d       	mov	r22, r15
 1c0:	33 d3       	rcall	.+1638   	; 0x828 <__eewr_byte_m8>
		adc_in = ReadADC(0);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	6f df       	rcall	.-290    	; 0xa4 <ReadADC>
		temp = adc_in/2;
		lcd_puts2("T%d-R%dC", temp, refTemp);
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	08 2f       	mov	r16, r24
 1cc:	10 e0       	ldi	r17, 0x00	; 0
 1ce:	6f 2c       	mov	r6, r15
 1d0:	77 24       	eor	r7, r7
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <main+0xcc>
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <main+0xce>
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <main+0xd0>
 1d8:	ed b7       	in	r30, 0x3d	; 61
 1da:	fe b7       	in	r31, 0x3e	; 62
 1dc:	31 96       	adiw	r30, 0x01	; 1
 1de:	ad b7       	in	r26, 0x3d	; 61
 1e0:	be b7       	in	r27, 0x3e	; 62
 1e2:	12 96       	adiw	r26, 0x02	; 2
 1e4:	9c 92       	st	X, r9
 1e6:	8e 92       	st	-X, r8
 1e8:	11 97       	sbiw	r26, 0x01	; 1
 1ea:	13 83       	std	Z+3, r17	; 0x03
 1ec:	02 83       	std	Z+2, r16	; 0x02
 1ee:	75 82       	std	Z+5, r7	; 0x05
 1f0:	64 82       	std	Z+4, r6	; 0x04
 1f2:	f5 d0       	rcall	.+490    	; 0x3de <lcd_puts2>
		if ((temp - refTemp) > TOL)
 1f4:	c8 01       	movw	r24, r16
 1f6:	86 19       	sub	r24, r6
 1f8:	97 09       	sbc	r25, r7
 1fa:	ed b7       	in	r30, 0x3d	; 61
 1fc:	fe b7       	in	r31, 0x3e	; 62
 1fe:	36 96       	adiw	r30, 0x06	; 6
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	fe bf       	out	0x3e, r31	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	ed bf       	out	0x3d, r30	; 61
 20a:	02 97       	sbiw	r24, 0x02	; 2
 20c:	3c f4       	brge	.+14     	; 0x21c <main+0x114>
			check = 3;
		else if ((refTemp - temp) > TOL)
 20e:	60 1a       	sub	r6, r16
 210:	71 0a       	sbc	r7, r17
 212:	f2 e0       	ldi	r31, 0x02	; 2
 214:	6f 16       	cp	r6, r31
 216:	71 04       	cpc	r7, r1
 218:	8c f4       	brge	.+34     	; 0x23c <main+0x134>
 21a:	15 c0       	rjmp	.+42     	; 0x246 <main+0x13e>
				if (prev_check == 2) break;
				setDutyCycle2();
				prev_check = 2;
				break;
			case 3:
				if (prev_check == 3) break;
 21c:	29 81       	ldd	r18, Y+1	; 0x01
 21e:	23 30       	cpi	r18, 0x03	; 3
 220:	49 f4       	brne	.+18     	; 0x234 <main+0x12c>
 222:	ab cf       	rjmp	.-170    	; 0x17a <main+0x72>
		else
			check = 2;
		switch(check) {
			case 1:
				if (prev_check == 1) break;
				setDutyCycle1();
 224:	2c df       	rcall	.-424    	; 0x7e <setDutyCycle1>
 226:	31 e0       	ldi	r19, 0x01	; 1
 228:	39 83       	std	Y+1, r19	; 0x01
 22a:	a7 cf       	rjmp	.-178    	; 0x17a <main+0x72>
				prev_check = 1;
				break;
			case 2:
				if (prev_check == 2) break;
				setDutyCycle2();
 22c:	2f df       	rcall	.-418    	; 0x8c <setDutyCycle2>
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	89 83       	std	Y+1, r24	; 0x01
 232:	a3 cf       	rjmp	.-186    	; 0x17a <main+0x72>
				prev_check = 2;
				break;
			case 3:
				if (prev_check == 3) break;
				setDutyCycle3();
 234:	32 df       	rcall	.-412    	; 0x9a <setDutyCycle3>
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	99 83       	std	Y+1, r25	; 0x01
 23a:	9f cf       	rjmp	.-194    	; 0x17a <main+0x72>
			check = 1;
		else
			check = 2;
		switch(check) {
			case 1:
				if (prev_check == 1) break;
 23c:	a9 81       	ldd	r26, Y+1	; 0x01
 23e:	a1 30       	cpi	r26, 0x01	; 1
 240:	09 f4       	brne	.+2      	; 0x244 <main+0x13c>
 242:	9b cf       	rjmp	.-202    	; 0x17a <main+0x72>
 244:	ef cf       	rjmp	.-34     	; 0x224 <main+0x11c>
				setDutyCycle1();
				prev_check = 1;
				break;
			case 2:
				if (prev_check == 2) break;
 246:	b9 81       	ldd	r27, Y+1	; 0x01
 248:	b2 30       	cpi	r27, 0x02	; 2
 24a:	09 f4       	brne	.+2      	; 0x24e <main+0x146>
 24c:	96 cf       	rjmp	.-212    	; 0x17a <main+0x72>
 24e:	ee cf       	rjmp	.-36     	; 0x22c <main+0x124>

00000250 <lcd_write>:
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
 250:	66 23       	and	r22, r22
 252:	11 f0       	breq	.+4      	; 0x258 <lcd_write+0x8>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
 254:	c7 9a       	sbi	0x18, 7	; 24
 256:	01 c0       	rjmp	.+2      	; 0x25a <lcd_write+0xa>
        PrevCmdInvolvedAddressCounter=1;
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
 258:	c7 98       	cbi	0x18, 7	; 24
      lcd_db6_port_high();
      lcd_db5_port_high();
      lcd_db4_port_high();

    #else //using 8-Bit_Mode
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
 25a:	87 ff       	sbrs	r24, 7
 25c:	02 c0       	rjmp	.+4      	; 0x262 <lcd_write+0x12>
 25e:	97 9a       	sbi	0x12, 7	; 18
 260:	01 c0       	rjmp	.+2      	; 0x264 <lcd_write+0x14>
 262:	97 98       	cbi	0x12, 7	; 18
      lcd_db6_port_set(data&_BV(6));
 264:	98 2f       	mov	r25, r24
 266:	86 ff       	sbrs	r24, 6
 268:	02 c0       	rjmp	.+4      	; 0x26e <lcd_write+0x1e>
 26a:	96 9a       	sbi	0x12, 6	; 18
 26c:	01 c0       	rjmp	.+2      	; 0x270 <lcd_write+0x20>
 26e:	96 98       	cbi	0x12, 6	; 18
      lcd_db5_port_set(data&_BV(5));
 270:	95 ff       	sbrs	r25, 5
 272:	02 c0       	rjmp	.+4      	; 0x278 <lcd_write+0x28>
 274:	95 9a       	sbi	0x12, 5	; 18
 276:	01 c0       	rjmp	.+2      	; 0x27a <lcd_write+0x2a>
 278:	95 98       	cbi	0x12, 5	; 18
      lcd_db4_port_set(data&_BV(4));
 27a:	94 ff       	sbrs	r25, 4
 27c:	02 c0       	rjmp	.+4      	; 0x282 <lcd_write+0x32>
 27e:	94 9a       	sbi	0x12, 4	; 18
 280:	01 c0       	rjmp	.+2      	; 0x284 <lcd_write+0x34>
 282:	94 98       	cbi	0x12, 4	; 18
      lcd_db3_port_set(data&_BV(3));                  //Output High Nibble
 284:	93 ff       	sbrs	r25, 3
 286:	02 c0       	rjmp	.+4      	; 0x28c <lcd_write+0x3c>
 288:	93 9a       	sbi	0x12, 3	; 18
 28a:	01 c0       	rjmp	.+2      	; 0x28e <lcd_write+0x3e>
 28c:	93 98       	cbi	0x12, 3	; 18
      lcd_db2_port_set(data&_BV(2));
 28e:	92 ff       	sbrs	r25, 2
 290:	02 c0       	rjmp	.+4      	; 0x296 <lcd_write+0x46>
 292:	92 9a       	sbi	0x12, 2	; 18
 294:	01 c0       	rjmp	.+2      	; 0x298 <lcd_write+0x48>
 296:	92 98       	cbi	0x12, 2	; 18
      lcd_db1_port_set(data&_BV(1));
 298:	91 ff       	sbrs	r25, 1
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <lcd_write+0x50>
 29c:	91 9a       	sbi	0x12, 1	; 18
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <lcd_write+0x52>
 2a0:	91 98       	cbi	0x12, 1	; 18
      lcd_db0_port_set(data&_BV(0));
 2a2:	90 ff       	sbrs	r25, 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <lcd_write+0x5a>
 2a6:	90 9a       	sbi	0x12, 0	; 18
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <lcd_write+0x5c>
 2aa:	90 98       	cbi	0x12, 0	; 18

      Delay_ns(100);
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <lcd_write+0x5e>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 2ae:	c6 9a       	sbi	0x18, 6	; 24
      lcd_db1_port_set(data&_BV(1));
      lcd_db0_port_set(data&_BV(0));

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 2b0:	92 e0       	ldi	r25, 0x02	; 2
 2b2:	9a 95       	dec	r25
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_write+0x62>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_write+0x68>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 2b8:	c6 98       	cbi	0x18, 6	; 24
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
 2ba:	97 9a       	sbi	0x12, 7	; 18
      lcd_db6_port_high();
 2bc:	96 9a       	sbi	0x12, 6	; 18
      lcd_db5_port_high();
 2be:	95 9a       	sbi	0x12, 5	; 18
      lcd_db4_port_high();
 2c0:	94 9a       	sbi	0x12, 4	; 18
      lcd_db3_port_high();
 2c2:	93 9a       	sbi	0x12, 3	; 18
      lcd_db2_port_high();
 2c4:	92 9a       	sbi	0x12, 2	; 18
      lcd_db1_port_high();
 2c6:	91 9a       	sbi	0x12, 1	; 18
      lcd_db0_port_high();
 2c8:	90 9a       	sbi	0x12, 0	; 18
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
 2ca:	66 23       	and	r22, r22
 2cc:	41 f4       	brne	.+16     	; 0x2de <lcd_write+0x8e>
 2ce:	84 30       	cpi	r24, 0x04	; 4
 2d0:	30 f4       	brcc	.+12     	; 0x2de <lcd_write+0x8e>
        Delay_us(1640);
 2d2:	8f e9       	ldi	r24, 0x9F	; 159
 2d4:	99 e1       	ldi	r25, 0x19	; 25
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_write+0x86>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcd_write+0x8c>
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <lcd_write+0x94>
      else Delay_us(40);
 2de:	95 ed       	ldi	r25, 0xD5	; 213
 2e0:	9a 95       	dec	r25
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_write+0x90>
 2e4:	00 00       	nop
 2e6:	08 95       	ret

000002e8 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	b2 df       	rcall	.-156    	; 0x250 <lcd_write>
  }
 2ec:	08 95       	ret

000002ee <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ec 01       	movw	r28, r24
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <lcd_puts_P+0xa>
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
      lcd_putc(c);
 2f6:	f8 df       	rcall	.-16     	; 0x2e8 <lcd_putc>
 2f8:	fe 01       	movw	r30, r28
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
 2fa:	21 96       	adiw	r28, 0x01	; 1
 2fc:	84 91       	lpm	r24, Z+
 2fe:	88 23       	and	r24, r24
 300:	d1 f7       	brne	.-12     	; 0x2f6 <lcd_puts_P+0x8>
      lcd_putc(c);
  }
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ec 01       	movw	r28, r24
 30e:	01 c0       	rjmp	.+2      	; 0x312 <lcd_puts+0xa>
    register char c;

    while ((c=*s++)) 
      lcd_putc(c);
 310:	eb df       	rcall	.-42     	; 0x2e8 <lcd_putc>
*************************************************************************/
void lcd_puts(const char *s)
  {
    register char c;

    while ((c=*s++)) 
 312:	89 91       	ld	r24, Y+
 314:	88 23       	and	r24, r24
 316:	e1 f7       	brne	.-8      	; 0x310 <lcd_puts+0x8>
      lcd_putc(c);
  }
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	97 df       	rcall	.-210    	; 0x250 <lcd_write>
  }
 322:	08 95       	ret

00000324 <lcd_home>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
  {
    lcd_command(1<<LCD_HOME);
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	fb df       	rcall	.-10     	; 0x31e <lcd_command>
  }
 328:	08 95       	ret

0000032a <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	f8 df       	rcall	.-16     	; 0x31e <lcd_command>
  }
 32e:	08 95       	ret

00000330 <lcd_goto>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
 330:	80 58       	subi	r24, 0x80	; 128
 332:	f5 df       	rcall	.-22     	; 0x31e <lcd_command>
  }
 334:	08 95       	ret

00000336 <lcd_init>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 336:	be 9a       	sbi	0x17, 6	; 23
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 338:	bf 9a       	sbi	0x17, 7	; 23
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
    #endif
    lcd_db7_ddr_high();
 33a:	8f 9a       	sbi	0x11, 7	; 17
    lcd_db6_ddr_high();
 33c:	8e 9a       	sbi	0x11, 6	; 17
    lcd_db5_ddr_high();
 33e:	8d 9a       	sbi	0x11, 5	; 17
    lcd_db4_ddr_high();
 340:	8c 9a       	sbi	0x11, 4	; 17
    #if LCD_BITS==8
      lcd_db3_ddr_high();
 342:	8b 9a       	sbi	0x11, 3	; 17
      lcd_db2_ddr_high();
 344:	8a 9a       	sbi	0x11, 2	; 17
      lcd_db1_ddr_high();
 346:	89 9a       	sbi	0x11, 1	; 17
      lcd_db0_ddr_high();
 348:	88 9a       	sbi	0x11, 0	; 17
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 34a:	c6 98       	cbi	0x18, 6	; 24
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
 34c:	c7 98       	cbi	0x18, 7	; 24
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 34e:	97 9a       	sbi	0x12, 7	; 18
    lcd_db6_port_high();
 350:	96 9a       	sbi	0x12, 6	; 18
    lcd_db5_port_high();
 352:	95 9a       	sbi	0x12, 5	; 18
    lcd_db4_port_high();
 354:	94 9a       	sbi	0x12, 4	; 18
    #if LCD_BITS==8
      lcd_db3_port_high();
 356:	93 9a       	sbi	0x12, 3	; 18
      lcd_db2_port_high();
 358:	92 9a       	sbi	0x12, 2	; 18
      lcd_db1_port_high();
 35a:	91 9a       	sbi	0x12, 1	; 18
      lcd_db0_port_high();
 35c:	90 9a       	sbi	0x12, 0	; 18
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 35e:	8f e5       	ldi	r24, 0x5F	; 95
 360:	9a ee       	ldi	r25, 0xEA	; 234
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <lcd_init+0x2c>
 366:	00 c0       	rjmp	.+0      	; 0x368 <lcd_init+0x32>
 368:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 36a:	97 98       	cbi	0x12, 7	; 18
    lcd_db6_port_low();
 36c:	96 98       	cbi	0x12, 6	; 18
    Delay_ns(100);
 36e:	00 c0       	rjmp	.+0      	; 0x370 <lcd_init+0x3a>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 370:	c6 9a       	sbi	0x18, 6	; 24
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
 372:	92 e0       	ldi	r25, 0x02	; 2
 374:	9a 95       	dec	r25
 376:	f1 f7       	brne	.-4      	; 0x374 <lcd_init+0x3e>
 378:	00 c0       	rjmp	.+0      	; 0x37a <lcd_init+0x44>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 37a:	c6 98       	cbi	0x18, 6	; 24
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(4100);
 37c:	8f e0       	ldi	r24, 0x0F	; 15
 37e:	90 e4       	ldi	r25, 0x40	; 64
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <lcd_init+0x4a>
 384:	00 c0       	rjmp	.+0      	; 0x386 <lcd_init+0x50>
 386:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 388:	c6 9a       	sbi	0x18, 6	; 24
    lcd_e_port_low();

    Delay_us(4100);

    lcd_e_port_high();
    Delay_ns(500);
 38a:	92 e0       	ldi	r25, 0x02	; 2
 38c:	9a 95       	dec	r25
 38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_init+0x56>
 390:	00 c0       	rjmp	.+0      	; 0x392 <lcd_init+0x5c>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 392:	c6 98       	cbi	0x18, 6	; 24

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(100);
 394:	8f e8       	ldi	r24, 0x8F	; 143
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_init+0x62>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <lcd_init+0x68>
 39e:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 3a0:	c6 9a       	sbi	0x18, 6	; 24
    lcd_e_port_low();

    Delay_us(100);

    lcd_e_port_high();
    Delay_ns(500);
 3a2:	92 e0       	ldi	r25, 0x02	; 2
 3a4:	9a 95       	dec	r25
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <lcd_init+0x6e>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <lcd_init+0x74>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 3aa:	c6 98       	cbi	0x18, 6	; 24

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(40);
 3ac:	85 ed       	ldi	r24, 0xD5	; 213
 3ae:	8a 95       	dec	r24
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_init+0x78>
 3b2:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #else
      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES<2)
          lcd_db3_port_low();
 3b4:	93 98       	cbi	0x12, 3	; 18
          }
        if (c<2)
          lcd_db3_port_low();
      #endif

      lcd_db2_port_low();
 3b6:	92 98       	cbi	0x12, 2	; 18
      Delay_ns(100);
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <lcd_init+0x84>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 3ba:	c6 9a       	sbi	0x18, 6	; 24
      #endif

      lcd_db2_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 3bc:	92 e0       	ldi	r25, 0x02	; 2
 3be:	9a 95       	dec	r25
 3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_init+0x88>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <lcd_init+0x8e>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 3c4:	c6 98       	cbi	0x18, 6	; 24
      lcd_db2_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 3c6:	85 ed       	ldi	r24, 0xD5	; 213
 3c8:	8a 95       	dec	r24
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcd_init+0x92>
 3cc:	00 00       	nop
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 3ce:	88 e0       	ldi	r24, 0x08	; 8
 3d0:	a6 df       	rcall	.-180    	; 0x31e <lcd_command>

    //Display Clear
    lcd_clrscr();
 3d2:	ab df       	rcall	.-170    	; 0x32a <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 3d4:	86 e0       	ldi	r24, 0x06	; 6
 3d6:	a3 df       	rcall	.-186    	; 0x31e <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 3d8:	8c e0       	ldi	r24, 0x0C	; 12
 3da:	a1 df       	rcall	.-190    	; 0x31e <lcd_command>
  }
 3dc:	08 95       	ret

000003de <lcd_puts2>:
      lcd_putc(c);
  }


void lcd_puts2(char *szFormat, ...)
{	
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	df 93       	push	r29
 3e4:	cf 93       	push	r28
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
 3ea:	c0 50       	subi	r28, 0x00	; 0
 3ec:	d1 40       	sbci	r29, 0x01	; 1
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
 3f8:	fe 01       	movw	r30, r28
 3fa:	e9 5f       	subi	r30, 0xF9	; 249
 3fc:	fe 4f       	sbci	r31, 0xFE	; 254
 3fe:	41 91       	ld	r20, Z+
 400:	51 91       	ld	r21, Z+
    char szBuffer[256]; //in this buffer we form the message
    int NUMCHARS = sizeof(szBuffer) / sizeof(szBuffer[0]);
    int LASTCHAR = NUMCHARS - 1;
    va_list pArgs;
    va_start(pArgs, szFormat);
    vsnprintf(szBuffer, LASTCHAR, szFormat, pArgs);
 402:	8e 01       	movw	r16, r28
 404:	0f 5f       	subi	r16, 0xFF	; 255
 406:	1f 4f       	sbci	r17, 0xFF	; 255
 408:	c8 01       	movw	r24, r16
 40a:	6f ef       	ldi	r22, 0xFF	; 255
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	9f 01       	movw	r18, r30
 410:	0e d0       	rcall	.+28     	; 0x42e <vsnprintf>
    va_end(pArgs);
	
	lcd_puts(szBuffer);
 412:	c8 01       	movw	r24, r16
 414:	79 df       	rcall	.-270    	; 0x308 <lcd_puts>

}
 416:	c0 50       	subi	r28, 0x00	; 0
 418:	df 4f       	sbci	r29, 0xFF	; 255
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	de bf       	out	0x3e, r29	; 62
 420:	0f be       	out	0x3f, r0	; 63
 422:	cd bf       	out	0x3d, r28	; 61
 424:	cf 91       	pop	r28
 426:	df 91       	pop	r29
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	08 95       	ret

0000042e <vsnprintf>:
 42e:	ae e0       	ldi	r26, 0x0E	; 14
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	ec e1       	ldi	r30, 0x1C	; 28
 434:	f2 e0       	ldi	r31, 0x02	; 2
 436:	b3 c2       	rjmp	.+1382   	; 0x99e <__prologue_saves__+0x1c>
 438:	8c 01       	movw	r16, r24
 43a:	77 ff       	sbrs	r23, 7
 43c:	02 c0       	rjmp	.+4      	; 0x442 <vsnprintf+0x14>
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	70 e8       	ldi	r23, 0x80	; 128
 442:	61 50       	subi	r22, 0x01	; 1
 444:	70 40       	sbci	r23, 0x00	; 0
 446:	7e 83       	std	Y+6, r23	; 0x06
 448:	6d 83       	std	Y+5, r22	; 0x05
 44a:	1a 83       	std	Y+2, r17	; 0x02
 44c:	09 83       	std	Y+1, r16	; 0x01
 44e:	86 e0       	ldi	r24, 0x06	; 6
 450:	8c 83       	std	Y+4, r24	; 0x04
 452:	ce 01       	movw	r24, r28
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	ba 01       	movw	r22, r20
 458:	a9 01       	movw	r20, r18
 45a:	10 d0       	rcall	.+32     	; 0x47c <vfprintf>
 45c:	2d 81       	ldd	r18, Y+5	; 0x05
 45e:	3e 81       	ldd	r19, Y+6	; 0x06
 460:	37 fd       	sbrc	r19, 7
 462:	09 c0       	rjmp	.+18     	; 0x476 <__stack+0x17>
 464:	ef 81       	ldd	r30, Y+7	; 0x07
 466:	f8 85       	ldd	r31, Y+8	; 0x08
 468:	2e 17       	cp	r18, r30
 46a:	3f 07       	cpc	r19, r31
 46c:	0c f4       	brge	.+2      	; 0x470 <__stack+0x11>
 46e:	f9 01       	movw	r30, r18
 470:	e0 0f       	add	r30, r16
 472:	f1 1f       	adc	r31, r17
 474:	10 82       	st	Z, r1
 476:	2e 96       	adiw	r28, 0x0e	; 14
 478:	e4 e0       	ldi	r30, 0x04	; 4
 47a:	ad c2       	rjmp	.+1370   	; 0x9d6 <__epilogue_restores__+0x1c>

0000047c <vfprintf>:
 47c:	ab e0       	ldi	r26, 0x0B	; 11
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	e3 e4       	ldi	r30, 0x43	; 67
 482:	f2 e0       	ldi	r31, 0x02	; 2
 484:	7e c2       	rjmp	.+1276   	; 0x982 <__prologue_saves__>
 486:	3c 01       	movw	r6, r24
 488:	2b 01       	movw	r4, r22
 48a:	5a 01       	movw	r10, r20
 48c:	fc 01       	movw	r30, r24
 48e:	17 82       	std	Z+7, r1	; 0x07
 490:	16 82       	std	Z+6, r1	; 0x06
 492:	83 81       	ldd	r24, Z+3	; 0x03
 494:	81 fd       	sbrc	r24, 1
 496:	03 c0       	rjmp	.+6      	; 0x49e <vfprintf+0x22>
 498:	6f ef       	ldi	r22, 0xFF	; 255
 49a:	7f ef       	ldi	r23, 0xFF	; 255
 49c:	b9 c1       	rjmp	.+882    	; 0x810 <vfprintf+0x394>
 49e:	9a e0       	ldi	r25, 0x0A	; 10
 4a0:	89 2e       	mov	r8, r25
 4a2:	1e 01       	movw	r2, r28
 4a4:	08 94       	sec
 4a6:	21 1c       	adc	r2, r1
 4a8:	31 1c       	adc	r3, r1
 4aa:	f3 01       	movw	r30, r6
 4ac:	23 81       	ldd	r18, Z+3	; 0x03
 4ae:	f2 01       	movw	r30, r4
 4b0:	23 fd       	sbrc	r18, 3
 4b2:	85 91       	lpm	r24, Z+
 4b4:	23 ff       	sbrs	r18, 3
 4b6:	81 91       	ld	r24, Z+
 4b8:	2f 01       	movw	r4, r30
 4ba:	88 23       	and	r24, r24
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <vfprintf+0x44>
 4be:	a5 c1       	rjmp	.+842    	; 0x80a <vfprintf+0x38e>
 4c0:	85 32       	cpi	r24, 0x25	; 37
 4c2:	39 f4       	brne	.+14     	; 0x4d2 <vfprintf+0x56>
 4c4:	23 fd       	sbrc	r18, 3
 4c6:	85 91       	lpm	r24, Z+
 4c8:	23 ff       	sbrs	r18, 3
 4ca:	81 91       	ld	r24, Z+
 4cc:	2f 01       	movw	r4, r30
 4ce:	85 32       	cpi	r24, 0x25	; 37
 4d0:	21 f4       	brne	.+8      	; 0x4da <vfprintf+0x5e>
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	b3 01       	movw	r22, r6
 4d6:	cb d1       	rcall	.+918    	; 0x86e <fputc>
 4d8:	e8 cf       	rjmp	.-48     	; 0x4aa <vfprintf+0x2e>
 4da:	98 2f       	mov	r25, r24
 4dc:	ff 24       	eor	r15, r15
 4de:	ee 24       	eor	r14, r14
 4e0:	99 24       	eor	r9, r9
 4e2:	ff e1       	ldi	r31, 0x1F	; 31
 4e4:	ff 15       	cp	r31, r15
 4e6:	d0 f0       	brcs	.+52     	; 0x51c <vfprintf+0xa0>
 4e8:	9b 32       	cpi	r25, 0x2B	; 43
 4ea:	69 f0       	breq	.+26     	; 0x506 <vfprintf+0x8a>
 4ec:	9c 32       	cpi	r25, 0x2C	; 44
 4ee:	28 f4       	brcc	.+10     	; 0x4fa <vfprintf+0x7e>
 4f0:	90 32       	cpi	r25, 0x20	; 32
 4f2:	59 f0       	breq	.+22     	; 0x50a <vfprintf+0x8e>
 4f4:	93 32       	cpi	r25, 0x23	; 35
 4f6:	91 f4       	brne	.+36     	; 0x51c <vfprintf+0xa0>
 4f8:	0e c0       	rjmp	.+28     	; 0x516 <vfprintf+0x9a>
 4fa:	9d 32       	cpi	r25, 0x2D	; 45
 4fc:	49 f0       	breq	.+18     	; 0x510 <vfprintf+0x94>
 4fe:	90 33       	cpi	r25, 0x30	; 48
 500:	69 f4       	brne	.+26     	; 0x51c <vfprintf+0xa0>
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	24 c0       	rjmp	.+72     	; 0x54e <vfprintf+0xd2>
 506:	52 e0       	ldi	r21, 0x02	; 2
 508:	f5 2a       	or	r15, r21
 50a:	84 e0       	ldi	r24, 0x04	; 4
 50c:	f8 2a       	or	r15, r24
 50e:	28 c0       	rjmp	.+80     	; 0x560 <vfprintf+0xe4>
 510:	98 e0       	ldi	r25, 0x08	; 8
 512:	f9 2a       	or	r15, r25
 514:	25 c0       	rjmp	.+74     	; 0x560 <vfprintf+0xe4>
 516:	e0 e1       	ldi	r30, 0x10	; 16
 518:	fe 2a       	or	r15, r30
 51a:	22 c0       	rjmp	.+68     	; 0x560 <vfprintf+0xe4>
 51c:	f7 fc       	sbrc	r15, 7
 51e:	29 c0       	rjmp	.+82     	; 0x572 <vfprintf+0xf6>
 520:	89 2f       	mov	r24, r25
 522:	80 53       	subi	r24, 0x30	; 48
 524:	8a 30       	cpi	r24, 0x0A	; 10
 526:	70 f4       	brcc	.+28     	; 0x544 <vfprintf+0xc8>
 528:	f6 fe       	sbrs	r15, 6
 52a:	05 c0       	rjmp	.+10     	; 0x536 <vfprintf+0xba>
 52c:	98 9c       	mul	r9, r8
 52e:	90 2c       	mov	r9, r0
 530:	11 24       	eor	r1, r1
 532:	98 0e       	add	r9, r24
 534:	15 c0       	rjmp	.+42     	; 0x560 <vfprintf+0xe4>
 536:	e8 9c       	mul	r14, r8
 538:	e0 2c       	mov	r14, r0
 53a:	11 24       	eor	r1, r1
 53c:	e8 0e       	add	r14, r24
 53e:	f0 e2       	ldi	r31, 0x20	; 32
 540:	ff 2a       	or	r15, r31
 542:	0e c0       	rjmp	.+28     	; 0x560 <vfprintf+0xe4>
 544:	9e 32       	cpi	r25, 0x2E	; 46
 546:	29 f4       	brne	.+10     	; 0x552 <vfprintf+0xd6>
 548:	f6 fc       	sbrc	r15, 6
 54a:	5f c1       	rjmp	.+702    	; 0x80a <vfprintf+0x38e>
 54c:	40 e4       	ldi	r20, 0x40	; 64
 54e:	f4 2a       	or	r15, r20
 550:	07 c0       	rjmp	.+14     	; 0x560 <vfprintf+0xe4>
 552:	9c 36       	cpi	r25, 0x6C	; 108
 554:	19 f4       	brne	.+6      	; 0x55c <vfprintf+0xe0>
 556:	50 e8       	ldi	r21, 0x80	; 128
 558:	f5 2a       	or	r15, r21
 55a:	02 c0       	rjmp	.+4      	; 0x560 <vfprintf+0xe4>
 55c:	98 36       	cpi	r25, 0x68	; 104
 55e:	49 f4       	brne	.+18     	; 0x572 <vfprintf+0xf6>
 560:	f2 01       	movw	r30, r4
 562:	23 fd       	sbrc	r18, 3
 564:	95 91       	lpm	r25, Z+
 566:	23 ff       	sbrs	r18, 3
 568:	91 91       	ld	r25, Z+
 56a:	2f 01       	movw	r4, r30
 56c:	99 23       	and	r25, r25
 56e:	09 f0       	breq	.+2      	; 0x572 <vfprintf+0xf6>
 570:	b8 cf       	rjmp	.-144    	; 0x4e2 <vfprintf+0x66>
 572:	89 2f       	mov	r24, r25
 574:	85 54       	subi	r24, 0x45	; 69
 576:	83 30       	cpi	r24, 0x03	; 3
 578:	18 f0       	brcs	.+6      	; 0x580 <vfprintf+0x104>
 57a:	80 52       	subi	r24, 0x20	; 32
 57c:	83 30       	cpi	r24, 0x03	; 3
 57e:	38 f4       	brcc	.+14     	; 0x58e <vfprintf+0x112>
 580:	44 e0       	ldi	r20, 0x04	; 4
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	a4 0e       	add	r10, r20
 586:	b5 1e       	adc	r11, r21
 588:	5f e3       	ldi	r21, 0x3F	; 63
 58a:	59 83       	std	Y+1, r21	; 0x01
 58c:	0f c0       	rjmp	.+30     	; 0x5ac <vfprintf+0x130>
 58e:	93 36       	cpi	r25, 0x63	; 99
 590:	31 f0       	breq	.+12     	; 0x59e <vfprintf+0x122>
 592:	93 37       	cpi	r25, 0x73	; 115
 594:	79 f0       	breq	.+30     	; 0x5b4 <vfprintf+0x138>
 596:	93 35       	cpi	r25, 0x53	; 83
 598:	09 f0       	breq	.+2      	; 0x59c <vfprintf+0x120>
 59a:	52 c0       	rjmp	.+164    	; 0x640 <vfprintf+0x1c4>
 59c:	1f c0       	rjmp	.+62     	; 0x5dc <vfprintf+0x160>
 59e:	f5 01       	movw	r30, r10
 5a0:	80 81       	ld	r24, Z
 5a2:	89 83       	std	Y+1, r24	; 0x01
 5a4:	42 e0       	ldi	r20, 0x02	; 2
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	a4 0e       	add	r10, r20
 5aa:	b5 1e       	adc	r11, r21
 5ac:	61 01       	movw	r12, r2
 5ae:	01 e0       	ldi	r16, 0x01	; 1
 5b0:	10 e0       	ldi	r17, 0x00	; 0
 5b2:	11 c0       	rjmp	.+34     	; 0x5d6 <vfprintf+0x15a>
 5b4:	f5 01       	movw	r30, r10
 5b6:	c0 80       	ld	r12, Z
 5b8:	d1 80       	ldd	r13, Z+1	; 0x01
 5ba:	f6 fc       	sbrc	r15, 6
 5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <vfprintf+0x148>
 5be:	6f ef       	ldi	r22, 0xFF	; 255
 5c0:	7f ef       	ldi	r23, 0xFF	; 255
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <vfprintf+0x14c>
 5c4:	69 2d       	mov	r22, r9
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	42 e0       	ldi	r20, 0x02	; 2
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	a4 0e       	add	r10, r20
 5ce:	b5 1e       	adc	r11, r21
 5d0:	c6 01       	movw	r24, r12
 5d2:	42 d1       	rcall	.+644    	; 0x858 <strnlen>
 5d4:	8c 01       	movw	r16, r24
 5d6:	5f e7       	ldi	r21, 0x7F	; 127
 5d8:	f5 22       	and	r15, r21
 5da:	13 c0       	rjmp	.+38     	; 0x602 <vfprintf+0x186>
 5dc:	f5 01       	movw	r30, r10
 5de:	c0 80       	ld	r12, Z
 5e0:	d1 80       	ldd	r13, Z+1	; 0x01
 5e2:	f6 fc       	sbrc	r15, 6
 5e4:	03 c0       	rjmp	.+6      	; 0x5ec <vfprintf+0x170>
 5e6:	6f ef       	ldi	r22, 0xFF	; 255
 5e8:	7f ef       	ldi	r23, 0xFF	; 255
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <vfprintf+0x174>
 5ec:	69 2d       	mov	r22, r9
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	42 e0       	ldi	r20, 0x02	; 2
 5f2:	50 e0       	ldi	r21, 0x00	; 0
 5f4:	a4 0e       	add	r10, r20
 5f6:	b5 1e       	adc	r11, r21
 5f8:	c6 01       	movw	r24, r12
 5fa:	23 d1       	rcall	.+582    	; 0x842 <strnlen_P>
 5fc:	8c 01       	movw	r16, r24
 5fe:	50 e8       	ldi	r21, 0x80	; 128
 600:	f5 2a       	or	r15, r21
 602:	f3 fe       	sbrs	r15, 3
 604:	06 c0       	rjmp	.+12     	; 0x612 <vfprintf+0x196>
 606:	18 c0       	rjmp	.+48     	; 0x638 <vfprintf+0x1bc>
 608:	80 e2       	ldi	r24, 0x20	; 32
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	b3 01       	movw	r22, r6
 60e:	2f d1       	rcall	.+606    	; 0x86e <fputc>
 610:	ea 94       	dec	r14
 612:	8e 2d       	mov	r24, r14
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	08 17       	cp	r16, r24
 618:	19 07       	cpc	r17, r25
 61a:	b0 f3       	brcs	.-20     	; 0x608 <vfprintf+0x18c>
 61c:	0d c0       	rjmp	.+26     	; 0x638 <vfprintf+0x1bc>
 61e:	f6 01       	movw	r30, r12
 620:	f7 fc       	sbrc	r15, 7
 622:	85 91       	lpm	r24, Z+
 624:	f7 fe       	sbrs	r15, 7
 626:	81 91       	ld	r24, Z+
 628:	6f 01       	movw	r12, r30
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	b3 01       	movw	r22, r6
 62e:	1f d1       	rcall	.+574    	; 0x86e <fputc>
 630:	e1 10       	cpse	r14, r1
 632:	ea 94       	dec	r14
 634:	01 50       	subi	r16, 0x01	; 1
 636:	10 40       	sbci	r17, 0x00	; 0
 638:	01 15       	cp	r16, r1
 63a:	11 05       	cpc	r17, r1
 63c:	81 f7       	brne	.-32     	; 0x61e <vfprintf+0x1a2>
 63e:	e2 c0       	rjmp	.+452    	; 0x804 <vfprintf+0x388>
 640:	94 36       	cpi	r25, 0x64	; 100
 642:	11 f0       	breq	.+4      	; 0x648 <vfprintf+0x1cc>
 644:	99 36       	cpi	r25, 0x69	; 105
 646:	61 f5       	brne	.+88     	; 0x6a0 <vfprintf+0x224>
 648:	f7 fe       	sbrs	r15, 7
 64a:	08 c0       	rjmp	.+16     	; 0x65c <vfprintf+0x1e0>
 64c:	f5 01       	movw	r30, r10
 64e:	20 81       	ld	r18, Z
 650:	31 81       	ldd	r19, Z+1	; 0x01
 652:	42 81       	ldd	r20, Z+2	; 0x02
 654:	53 81       	ldd	r21, Z+3	; 0x03
 656:	84 e0       	ldi	r24, 0x04	; 4
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0a c0       	rjmp	.+20     	; 0x670 <vfprintf+0x1f4>
 65c:	f5 01       	movw	r30, r10
 65e:	80 81       	ld	r24, Z
 660:	91 81       	ldd	r25, Z+1	; 0x01
 662:	9c 01       	movw	r18, r24
 664:	44 27       	eor	r20, r20
 666:	37 fd       	sbrc	r19, 7
 668:	40 95       	com	r20
 66a:	54 2f       	mov	r21, r20
 66c:	82 e0       	ldi	r24, 0x02	; 2
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	a8 0e       	add	r10, r24
 672:	b9 1e       	adc	r11, r25
 674:	9f e6       	ldi	r25, 0x6F	; 111
 676:	f9 22       	and	r15, r25
 678:	57 ff       	sbrs	r21, 7
 67a:	09 c0       	rjmp	.+18     	; 0x68e <vfprintf+0x212>
 67c:	50 95       	com	r21
 67e:	40 95       	com	r20
 680:	30 95       	com	r19
 682:	21 95       	neg	r18
 684:	3f 4f       	sbci	r19, 0xFF	; 255
 686:	4f 4f       	sbci	r20, 0xFF	; 255
 688:	5f 4f       	sbci	r21, 0xFF	; 255
 68a:	e0 e8       	ldi	r30, 0x80	; 128
 68c:	fe 2a       	or	r15, r30
 68e:	ca 01       	movw	r24, r20
 690:	b9 01       	movw	r22, r18
 692:	a1 01       	movw	r20, r2
 694:	2a e0       	ldi	r18, 0x0A	; 10
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	16 d1       	rcall	.+556    	; 0x8c6 <__ultoa_invert>
 69a:	d8 2e       	mov	r13, r24
 69c:	d2 18       	sub	r13, r2
 69e:	3f c0       	rjmp	.+126    	; 0x71e <vfprintf+0x2a2>
 6a0:	95 37       	cpi	r25, 0x75	; 117
 6a2:	29 f4       	brne	.+10     	; 0x6ae <vfprintf+0x232>
 6a4:	1f 2d       	mov	r17, r15
 6a6:	1f 7e       	andi	r17, 0xEF	; 239
 6a8:	2a e0       	ldi	r18, 0x0A	; 10
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	1d c0       	rjmp	.+58     	; 0x6e8 <vfprintf+0x26c>
 6ae:	1f 2d       	mov	r17, r15
 6b0:	19 7f       	andi	r17, 0xF9	; 249
 6b2:	9f 36       	cpi	r25, 0x6F	; 111
 6b4:	61 f0       	breq	.+24     	; 0x6ce <vfprintf+0x252>
 6b6:	90 37       	cpi	r25, 0x70	; 112
 6b8:	20 f4       	brcc	.+8      	; 0x6c2 <vfprintf+0x246>
 6ba:	98 35       	cpi	r25, 0x58	; 88
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <vfprintf+0x244>
 6be:	a5 c0       	rjmp	.+330    	; 0x80a <vfprintf+0x38e>
 6c0:	0f c0       	rjmp	.+30     	; 0x6e0 <vfprintf+0x264>
 6c2:	90 37       	cpi	r25, 0x70	; 112
 6c4:	39 f0       	breq	.+14     	; 0x6d4 <vfprintf+0x258>
 6c6:	98 37       	cpi	r25, 0x78	; 120
 6c8:	09 f0       	breq	.+2      	; 0x6cc <vfprintf+0x250>
 6ca:	9f c0       	rjmp	.+318    	; 0x80a <vfprintf+0x38e>
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <vfprintf+0x25a>
 6ce:	28 e0       	ldi	r18, 0x08	; 8
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	0a c0       	rjmp	.+20     	; 0x6e8 <vfprintf+0x26c>
 6d4:	10 61       	ori	r17, 0x10	; 16
 6d6:	14 fd       	sbrc	r17, 4
 6d8:	14 60       	ori	r17, 0x04	; 4
 6da:	20 e1       	ldi	r18, 0x10	; 16
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <vfprintf+0x26c>
 6e0:	14 fd       	sbrc	r17, 4
 6e2:	16 60       	ori	r17, 0x06	; 6
 6e4:	20 e1       	ldi	r18, 0x10	; 16
 6e6:	32 e0       	ldi	r19, 0x02	; 2
 6e8:	17 ff       	sbrs	r17, 7
 6ea:	08 c0       	rjmp	.+16     	; 0x6fc <vfprintf+0x280>
 6ec:	f5 01       	movw	r30, r10
 6ee:	60 81       	ld	r22, Z
 6f0:	71 81       	ldd	r23, Z+1	; 0x01
 6f2:	82 81       	ldd	r24, Z+2	; 0x02
 6f4:	93 81       	ldd	r25, Z+3	; 0x03
 6f6:	44 e0       	ldi	r20, 0x04	; 4
 6f8:	50 e0       	ldi	r21, 0x00	; 0
 6fa:	08 c0       	rjmp	.+16     	; 0x70c <vfprintf+0x290>
 6fc:	f5 01       	movw	r30, r10
 6fe:	80 81       	ld	r24, Z
 700:	91 81       	ldd	r25, Z+1	; 0x01
 702:	bc 01       	movw	r22, r24
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	42 e0       	ldi	r20, 0x02	; 2
 70a:	50 e0       	ldi	r21, 0x00	; 0
 70c:	a4 0e       	add	r10, r20
 70e:	b5 1e       	adc	r11, r21
 710:	a1 01       	movw	r20, r2
 712:	d9 d0       	rcall	.+434    	; 0x8c6 <__ultoa_invert>
 714:	d8 2e       	mov	r13, r24
 716:	d2 18       	sub	r13, r2
 718:	8f e7       	ldi	r24, 0x7F	; 127
 71a:	f8 2e       	mov	r15, r24
 71c:	f1 22       	and	r15, r17
 71e:	f6 fe       	sbrs	r15, 6
 720:	0b c0       	rjmp	.+22     	; 0x738 <vfprintf+0x2bc>
 722:	5e ef       	ldi	r21, 0xFE	; 254
 724:	f5 22       	and	r15, r21
 726:	d9 14       	cp	r13, r9
 728:	38 f4       	brcc	.+14     	; 0x738 <vfprintf+0x2bc>
 72a:	f4 fe       	sbrs	r15, 4
 72c:	07 c0       	rjmp	.+14     	; 0x73c <vfprintf+0x2c0>
 72e:	f2 fc       	sbrc	r15, 2
 730:	05 c0       	rjmp	.+10     	; 0x73c <vfprintf+0x2c0>
 732:	8f ee       	ldi	r24, 0xEF	; 239
 734:	f8 22       	and	r15, r24
 736:	02 c0       	rjmp	.+4      	; 0x73c <vfprintf+0x2c0>
 738:	1d 2d       	mov	r17, r13
 73a:	01 c0       	rjmp	.+2      	; 0x73e <vfprintf+0x2c2>
 73c:	19 2d       	mov	r17, r9
 73e:	f4 fe       	sbrs	r15, 4
 740:	0d c0       	rjmp	.+26     	; 0x75c <vfprintf+0x2e0>
 742:	fe 01       	movw	r30, r28
 744:	ed 0d       	add	r30, r13
 746:	f1 1d       	adc	r31, r1
 748:	80 81       	ld	r24, Z
 74a:	80 33       	cpi	r24, 0x30	; 48
 74c:	19 f4       	brne	.+6      	; 0x754 <vfprintf+0x2d8>
 74e:	99 ee       	ldi	r25, 0xE9	; 233
 750:	f9 22       	and	r15, r25
 752:	08 c0       	rjmp	.+16     	; 0x764 <vfprintf+0x2e8>
 754:	1f 5f       	subi	r17, 0xFF	; 255
 756:	f2 fe       	sbrs	r15, 2
 758:	05 c0       	rjmp	.+10     	; 0x764 <vfprintf+0x2e8>
 75a:	03 c0       	rjmp	.+6      	; 0x762 <vfprintf+0x2e6>
 75c:	8f 2d       	mov	r24, r15
 75e:	86 78       	andi	r24, 0x86	; 134
 760:	09 f0       	breq	.+2      	; 0x764 <vfprintf+0x2e8>
 762:	1f 5f       	subi	r17, 0xFF	; 255
 764:	0f 2d       	mov	r16, r15
 766:	f3 fc       	sbrc	r15, 3
 768:	13 c0       	rjmp	.+38     	; 0x790 <vfprintf+0x314>
 76a:	f0 fe       	sbrs	r15, 0
 76c:	0e c0       	rjmp	.+28     	; 0x78a <vfprintf+0x30e>
 76e:	1e 15       	cp	r17, r14
 770:	10 f0       	brcs	.+4      	; 0x776 <vfprintf+0x2fa>
 772:	9d 2c       	mov	r9, r13
 774:	0a c0       	rjmp	.+20     	; 0x78a <vfprintf+0x30e>
 776:	9d 2c       	mov	r9, r13
 778:	9e 0c       	add	r9, r14
 77a:	91 1a       	sub	r9, r17
 77c:	1e 2d       	mov	r17, r14
 77e:	05 c0       	rjmp	.+10     	; 0x78a <vfprintf+0x30e>
 780:	80 e2       	ldi	r24, 0x20	; 32
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	b3 01       	movw	r22, r6
 786:	73 d0       	rcall	.+230    	; 0x86e <fputc>
 788:	1f 5f       	subi	r17, 0xFF	; 255
 78a:	1e 15       	cp	r17, r14
 78c:	c8 f3       	brcs	.-14     	; 0x780 <vfprintf+0x304>
 78e:	04 c0       	rjmp	.+8      	; 0x798 <vfprintf+0x31c>
 790:	1e 15       	cp	r17, r14
 792:	10 f4       	brcc	.+4      	; 0x798 <vfprintf+0x31c>
 794:	e1 1a       	sub	r14, r17
 796:	01 c0       	rjmp	.+2      	; 0x79a <vfprintf+0x31e>
 798:	ee 24       	eor	r14, r14
 79a:	04 ff       	sbrs	r16, 4
 79c:	0e c0       	rjmp	.+28     	; 0x7ba <vfprintf+0x33e>
 79e:	80 e3       	ldi	r24, 0x30	; 48
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	b3 01       	movw	r22, r6
 7a4:	64 d0       	rcall	.+200    	; 0x86e <fputc>
 7a6:	02 ff       	sbrs	r16, 2
 7a8:	1b c0       	rjmp	.+54     	; 0x7e0 <vfprintf+0x364>
 7aa:	01 fd       	sbrc	r16, 1
 7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <vfprintf+0x338>
 7ae:	88 e7       	ldi	r24, 0x78	; 120
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e c0       	rjmp	.+28     	; 0x7d0 <vfprintf+0x354>
 7b4:	88 e5       	ldi	r24, 0x58	; 88
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0b c0       	rjmp	.+22     	; 0x7d0 <vfprintf+0x354>
 7ba:	80 2f       	mov	r24, r16
 7bc:	86 78       	andi	r24, 0x86	; 134
 7be:	81 f0       	breq	.+32     	; 0x7e0 <vfprintf+0x364>
 7c0:	01 ff       	sbrs	r16, 1
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <vfprintf+0x34c>
 7c4:	8b e2       	ldi	r24, 0x2B	; 43
 7c6:	01 c0       	rjmp	.+2      	; 0x7ca <vfprintf+0x34e>
 7c8:	80 e2       	ldi	r24, 0x20	; 32
 7ca:	f7 fc       	sbrc	r15, 7
 7cc:	8d e2       	ldi	r24, 0x2D	; 45
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	b3 01       	movw	r22, r6
 7d2:	4d d0       	rcall	.+154    	; 0x86e <fputc>
 7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <vfprintf+0x364>
 7d6:	80 e3       	ldi	r24, 0x30	; 48
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	b3 01       	movw	r22, r6
 7dc:	48 d0       	rcall	.+144    	; 0x86e <fputc>
 7de:	9a 94       	dec	r9
 7e0:	d9 14       	cp	r13, r9
 7e2:	c8 f3       	brcs	.-14     	; 0x7d6 <vfprintf+0x35a>
 7e4:	da 94       	dec	r13
 7e6:	f1 01       	movw	r30, r2
 7e8:	ed 0d       	add	r30, r13
 7ea:	f1 1d       	adc	r31, r1
 7ec:	80 81       	ld	r24, Z
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	b3 01       	movw	r22, r6
 7f2:	3d d0       	rcall	.+122    	; 0x86e <fputc>
 7f4:	dd 20       	and	r13, r13
 7f6:	b1 f7       	brne	.-20     	; 0x7e4 <vfprintf+0x368>
 7f8:	05 c0       	rjmp	.+10     	; 0x804 <vfprintf+0x388>
 7fa:	80 e2       	ldi	r24, 0x20	; 32
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	b3 01       	movw	r22, r6
 800:	36 d0       	rcall	.+108    	; 0x86e <fputc>
 802:	ea 94       	dec	r14
 804:	ee 20       	and	r14, r14
 806:	c9 f7       	brne	.-14     	; 0x7fa <vfprintf+0x37e>
 808:	50 ce       	rjmp	.-864    	; 0x4aa <vfprintf+0x2e>
 80a:	f3 01       	movw	r30, r6
 80c:	66 81       	ldd	r22, Z+6	; 0x06
 80e:	77 81       	ldd	r23, Z+7	; 0x07
 810:	cb 01       	movw	r24, r22
 812:	2b 96       	adiw	r28, 0x0b	; 11
 814:	e2 e1       	ldi	r30, 0x12	; 18
 816:	d1 c0       	rjmp	.+418    	; 0x9ba <__epilogue_restores__>

00000818 <__eerd_byte_m8>:
 818:	e1 99       	sbic	0x1c, 1	; 28
 81a:	fe cf       	rjmp	.-4      	; 0x818 <__eerd_byte_m8>
 81c:	9f bb       	out	0x1f, r25	; 31
 81e:	8e bb       	out	0x1e, r24	; 30
 820:	e0 9a       	sbi	0x1c, 0	; 28
 822:	99 27       	eor	r25, r25
 824:	8d b3       	in	r24, 0x1d	; 29
 826:	08 95       	ret

00000828 <__eewr_byte_m8>:
 828:	26 2f       	mov	r18, r22

0000082a <__eewr_r18_m8>:
 82a:	e1 99       	sbic	0x1c, 1	; 28
 82c:	fe cf       	rjmp	.-4      	; 0x82a <__eewr_r18_m8>
 82e:	9f bb       	out	0x1f, r25	; 31
 830:	8e bb       	out	0x1e, r24	; 30
 832:	2d bb       	out	0x1d, r18	; 29
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	f8 94       	cli
 838:	e2 9a       	sbi	0x1c, 2	; 28
 83a:	e1 9a       	sbi	0x1c, 1	; 28
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	01 96       	adiw	r24, 0x01	; 1
 840:	08 95       	ret

00000842 <strnlen_P>:
 842:	fc 01       	movw	r30, r24
 844:	05 90       	lpm	r0, Z+
 846:	61 50       	subi	r22, 0x01	; 1
 848:	70 40       	sbci	r23, 0x00	; 0
 84a:	01 10       	cpse	r0, r1
 84c:	d8 f7       	brcc	.-10     	; 0x844 <strnlen_P+0x2>
 84e:	80 95       	com	r24
 850:	90 95       	com	r25
 852:	8e 0f       	add	r24, r30
 854:	9f 1f       	adc	r25, r31
 856:	08 95       	ret

00000858 <strnlen>:
 858:	fc 01       	movw	r30, r24
 85a:	61 50       	subi	r22, 0x01	; 1
 85c:	70 40       	sbci	r23, 0x00	; 0
 85e:	01 90       	ld	r0, Z+
 860:	01 10       	cpse	r0, r1
 862:	d8 f7       	brcc	.-10     	; 0x85a <strnlen+0x2>
 864:	80 95       	com	r24
 866:	90 95       	com	r25
 868:	8e 0f       	add	r24, r30
 86a:	9f 1f       	adc	r25, r31
 86c:	08 95       	ret

0000086e <fputc>:
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	8c 01       	movw	r16, r24
 878:	eb 01       	movw	r28, r22
 87a:	8b 81       	ldd	r24, Y+3	; 0x03
 87c:	81 ff       	sbrs	r24, 1
 87e:	1b c0       	rjmp	.+54     	; 0x8b6 <fputc+0x48>
 880:	82 ff       	sbrs	r24, 2
 882:	0d c0       	rjmp	.+26     	; 0x89e <fputc+0x30>
 884:	2e 81       	ldd	r18, Y+6	; 0x06
 886:	3f 81       	ldd	r19, Y+7	; 0x07
 888:	8c 81       	ldd	r24, Y+4	; 0x04
 88a:	9d 81       	ldd	r25, Y+5	; 0x05
 88c:	28 17       	cp	r18, r24
 88e:	39 07       	cpc	r19, r25
 890:	64 f4       	brge	.+24     	; 0x8aa <fputc+0x3c>
 892:	e8 81       	ld	r30, Y
 894:	f9 81       	ldd	r31, Y+1	; 0x01
 896:	01 93       	st	Z+, r16
 898:	f9 83       	std	Y+1, r31	; 0x01
 89a:	e8 83       	st	Y, r30
 89c:	06 c0       	rjmp	.+12     	; 0x8aa <fputc+0x3c>
 89e:	e8 85       	ldd	r30, Y+8	; 0x08
 8a0:	f9 85       	ldd	r31, Y+9	; 0x09
 8a2:	80 2f       	mov	r24, r16
 8a4:	09 95       	icall
 8a6:	89 2b       	or	r24, r25
 8a8:	31 f4       	brne	.+12     	; 0x8b6 <fputc+0x48>
 8aa:	8e 81       	ldd	r24, Y+6	; 0x06
 8ac:	9f 81       	ldd	r25, Y+7	; 0x07
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	9f 83       	std	Y+7, r25	; 0x07
 8b2:	8e 83       	std	Y+6, r24	; 0x06
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <fputc+0x4c>
 8b6:	0f ef       	ldi	r16, 0xFF	; 255
 8b8:	1f ef       	ldi	r17, 0xFF	; 255
 8ba:	c8 01       	movw	r24, r16
 8bc:	df 91       	pop	r29
 8be:	cf 91       	pop	r28
 8c0:	1f 91       	pop	r17
 8c2:	0f 91       	pop	r16
 8c4:	08 95       	ret

000008c6 <__ultoa_invert>:
 8c6:	fa 01       	movw	r30, r20
 8c8:	aa 27       	eor	r26, r26
 8ca:	28 30       	cpi	r18, 0x08	; 8
 8cc:	51 f1       	breq	.+84     	; 0x922 <__ultoa_invert+0x5c>
 8ce:	20 31       	cpi	r18, 0x10	; 16
 8d0:	81 f1       	breq	.+96     	; 0x932 <__ultoa_invert+0x6c>
 8d2:	e8 94       	clt
 8d4:	6f 93       	push	r22
 8d6:	6e 7f       	andi	r22, 0xFE	; 254
 8d8:	6e 5f       	subi	r22, 0xFE	; 254
 8da:	7f 4f       	sbci	r23, 0xFF	; 255
 8dc:	8f 4f       	sbci	r24, 0xFF	; 255
 8de:	9f 4f       	sbci	r25, 0xFF	; 255
 8e0:	af 4f       	sbci	r26, 0xFF	; 255
 8e2:	b1 e0       	ldi	r27, 0x01	; 1
 8e4:	3e d0       	rcall	.+124    	; 0x962 <__ultoa_invert+0x9c>
 8e6:	b4 e0       	ldi	r27, 0x04	; 4
 8e8:	3c d0       	rcall	.+120    	; 0x962 <__ultoa_invert+0x9c>
 8ea:	67 0f       	add	r22, r23
 8ec:	78 1f       	adc	r23, r24
 8ee:	89 1f       	adc	r24, r25
 8f0:	9a 1f       	adc	r25, r26
 8f2:	a1 1d       	adc	r26, r1
 8f4:	68 0f       	add	r22, r24
 8f6:	79 1f       	adc	r23, r25
 8f8:	8a 1f       	adc	r24, r26
 8fa:	91 1d       	adc	r25, r1
 8fc:	a1 1d       	adc	r26, r1
 8fe:	6a 0f       	add	r22, r26
 900:	71 1d       	adc	r23, r1
 902:	81 1d       	adc	r24, r1
 904:	91 1d       	adc	r25, r1
 906:	a1 1d       	adc	r26, r1
 908:	20 d0       	rcall	.+64     	; 0x94a <__ultoa_invert+0x84>
 90a:	09 f4       	brne	.+2      	; 0x90e <__ultoa_invert+0x48>
 90c:	68 94       	set
 90e:	3f 91       	pop	r19
 910:	2a e0       	ldi	r18, 0x0A	; 10
 912:	26 9f       	mul	r18, r22
 914:	11 24       	eor	r1, r1
 916:	30 19       	sub	r19, r0
 918:	30 5d       	subi	r19, 0xD0	; 208
 91a:	31 93       	st	Z+, r19
 91c:	de f6       	brtc	.-74     	; 0x8d4 <__ultoa_invert+0xe>
 91e:	cf 01       	movw	r24, r30
 920:	08 95       	ret
 922:	46 2f       	mov	r20, r22
 924:	47 70       	andi	r20, 0x07	; 7
 926:	40 5d       	subi	r20, 0xD0	; 208
 928:	41 93       	st	Z+, r20
 92a:	b3 e0       	ldi	r27, 0x03	; 3
 92c:	0f d0       	rcall	.+30     	; 0x94c <__ultoa_invert+0x86>
 92e:	c9 f7       	brne	.-14     	; 0x922 <__ultoa_invert+0x5c>
 930:	f6 cf       	rjmp	.-20     	; 0x91e <__ultoa_invert+0x58>
 932:	46 2f       	mov	r20, r22
 934:	4f 70       	andi	r20, 0x0F	; 15
 936:	40 5d       	subi	r20, 0xD0	; 208
 938:	4a 33       	cpi	r20, 0x3A	; 58
 93a:	18 f0       	brcs	.+6      	; 0x942 <__ultoa_invert+0x7c>
 93c:	49 5d       	subi	r20, 0xD9	; 217
 93e:	31 fd       	sbrc	r19, 1
 940:	40 52       	subi	r20, 0x20	; 32
 942:	41 93       	st	Z+, r20
 944:	02 d0       	rcall	.+4      	; 0x94a <__ultoa_invert+0x84>
 946:	a9 f7       	brne	.-22     	; 0x932 <__ultoa_invert+0x6c>
 948:	ea cf       	rjmp	.-44     	; 0x91e <__ultoa_invert+0x58>
 94a:	b4 e0       	ldi	r27, 0x04	; 4
 94c:	a6 95       	lsr	r26
 94e:	97 95       	ror	r25
 950:	87 95       	ror	r24
 952:	77 95       	ror	r23
 954:	67 95       	ror	r22
 956:	ba 95       	dec	r27
 958:	c9 f7       	brne	.-14     	; 0x94c <__ultoa_invert+0x86>
 95a:	00 97       	sbiw	r24, 0x00	; 0
 95c:	61 05       	cpc	r22, r1
 95e:	71 05       	cpc	r23, r1
 960:	08 95       	ret
 962:	9b 01       	movw	r18, r22
 964:	ac 01       	movw	r20, r24
 966:	0a 2e       	mov	r0, r26
 968:	06 94       	lsr	r0
 96a:	57 95       	ror	r21
 96c:	47 95       	ror	r20
 96e:	37 95       	ror	r19
 970:	27 95       	ror	r18
 972:	ba 95       	dec	r27
 974:	c9 f7       	brne	.-14     	; 0x968 <__ultoa_invert+0xa2>
 976:	62 0f       	add	r22, r18
 978:	73 1f       	adc	r23, r19
 97a:	84 1f       	adc	r24, r20
 97c:	95 1f       	adc	r25, r21
 97e:	a0 1d       	adc	r26, r0
 980:	08 95       	ret

00000982 <__prologue_saves__>:
 982:	2f 92       	push	r2
 984:	3f 92       	push	r3
 986:	4f 92       	push	r4
 988:	5f 92       	push	r5
 98a:	6f 92       	push	r6
 98c:	7f 92       	push	r7
 98e:	8f 92       	push	r8
 990:	9f 92       	push	r9
 992:	af 92       	push	r10
 994:	bf 92       	push	r11
 996:	cf 92       	push	r12
 998:	df 92       	push	r13
 99a:	ef 92       	push	r14
 99c:	ff 92       	push	r15
 99e:	0f 93       	push	r16
 9a0:	1f 93       	push	r17
 9a2:	cf 93       	push	r28
 9a4:	df 93       	push	r29
 9a6:	cd b7       	in	r28, 0x3d	; 61
 9a8:	de b7       	in	r29, 0x3e	; 62
 9aa:	ca 1b       	sub	r28, r26
 9ac:	db 0b       	sbc	r29, r27
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	f8 94       	cli
 9b2:	de bf       	out	0x3e, r29	; 62
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	cd bf       	out	0x3d, r28	; 61
 9b8:	09 94       	ijmp

000009ba <__epilogue_restores__>:
 9ba:	2a 88       	ldd	r2, Y+18	; 0x12
 9bc:	39 88       	ldd	r3, Y+17	; 0x11
 9be:	48 88       	ldd	r4, Y+16	; 0x10
 9c0:	5f 84       	ldd	r5, Y+15	; 0x0f
 9c2:	6e 84       	ldd	r6, Y+14	; 0x0e
 9c4:	7d 84       	ldd	r7, Y+13	; 0x0d
 9c6:	8c 84       	ldd	r8, Y+12	; 0x0c
 9c8:	9b 84       	ldd	r9, Y+11	; 0x0b
 9ca:	aa 84       	ldd	r10, Y+10	; 0x0a
 9cc:	b9 84       	ldd	r11, Y+9	; 0x09
 9ce:	c8 84       	ldd	r12, Y+8	; 0x08
 9d0:	df 80       	ldd	r13, Y+7	; 0x07
 9d2:	ee 80       	ldd	r14, Y+6	; 0x06
 9d4:	fd 80       	ldd	r15, Y+5	; 0x05
 9d6:	0c 81       	ldd	r16, Y+4	; 0x04
 9d8:	1b 81       	ldd	r17, Y+3	; 0x03
 9da:	aa 81       	ldd	r26, Y+2	; 0x02
 9dc:	b9 81       	ldd	r27, Y+1	; 0x01
 9de:	ce 0f       	add	r28, r30
 9e0:	d1 1d       	adc	r29, r1
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	f8 94       	cli
 9e6:	de bf       	out	0x3e, r29	; 62
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	cd bf       	out	0x3d, r28	; 61
 9ec:	ed 01       	movw	r28, r26
 9ee:	08 95       	ret

000009f0 <_exit>:
 9f0:	f8 94       	cli

000009f2 <__stop_program>:
 9f2:	ff cf       	rjmp	.-2      	; 0x9f2 <__stop_program>
